<root>
	<communication>
		<Port>1234</Port>
	</communication>

	<!-- set to false if you do not load maps on the robot (e.g. when maps are published by a server) -->
	<var useMap="true"/>
	<var topoMap="none"/>
	<var pilotConfig="./Pilot.xml"/>
	<var virtualObstacleFile="none"/>
	<var virtualReflectorMap="none"/>
	<var localizationMap="none"/>

	<if useMap="true">
		<var mapConfigFile="${findpkg SCITOSConfigs}/etc/DefaultMapConfig.xml"/>
		<include file="${mapConfigFile}"/>
		<var costMapperConfigFile="${findpkg SCITOSConfigs}/etc/DefaultCostMapperConfig.xml"/>
		<include file="${costMapperConfigFile}"/>
		<if_not topoMap="none">
			<namespace name="maps">
				<!-- the TopoMapManager is necessary for loading the topological map and for loading the maps and for switching between the maps-->
				<using name="../robot/RobotFrame" as="RobotFrame" />
				<using name="cost/CostMapper"/>
				<unit id="TopoMapManager" class="viros::topomap::TopoMapManager">
					<File>${topoMap}</File>
				</unit>
			</namespace>
		</if_not>
		<namespace name="maps">
			<if_not localizationMap="none">
				<namespace name="localization">
					<using name="../MapFrame" />
					
					<unit id="MapPublisher" class="mira::mapping::OccupancyGridLoader">
						<Maps>
							<item>
								<include file="${localizationMap}" select="Map/*" />
								<Channel>Map</Channel>
							</item>
						</Maps>
					</unit>
				</namespace>
			</if_not>
			<namespace name="obstacle">
				<if_not virtualObstacleFile="none">
					<link child="/VirtualObstacle" parent="/GlobalFrame">
						<X>0</X>
						<Y>0</Y>
						<Phi>0</Phi>
					</link>
					<using name="/VirtualObstacle"/>
					<unit id="RigidModelPublisher" class="mira::model::RigidModelPublisher">
							<RigidModelProvider>
								<include file="${virtualObstacleFile}" />
							</RigidModelProvider>
					</unit>
				</if_not>
				<if_not topoMap="none">
					<using name="../GlobalMap" as="StaticMap" />
				</if_not>
				<else>
					<if_not localizationMap="none">
						<using name="../localization/Map" as="StaticMap" />
					</if_not>
					<else>
						<using name="../static/Map" as="StaticMap" />
					</else>
				</else>
				<unit id="ObstacleMapper" class="mira::mapping::ObstacleMapper" >
					<ProviderMask>
						<item>../../robot/Robot</item>
					</ProviderMask>
				</unit>
			</namespace>

			<if_not virtualReflectorMap="none">
				<namespace name="reflector">
					<unit id="MapPublisher" class="mira::mapping::OccupancyGridLoader">
						<Maps>
							<item>
								<include file="${virtualReflectorMap}" select="Map/*" />
								<Channel>Map</Channel>
							</item>
						</Maps>
					</unit>
				</namespace>
			</if_not>

		</namespace>
	</if>

	<!-- Used localization [AMCL, Poseidon, PoseidonLaserTemplate] -->
	<if_exists package="Poseidon">
		<define localization="Poseidon" />
	</if_exists>
	<else>
		<if_exists package="AMCL">
			<define localization="AMCL" />
		</if_exists>
	</else>

	<include file="${findpkg SCITOSSimulator}/etc/SCITOSDriver.xml"/>

	<namespace name="robot">
		<using name="../maps/obstacle/Map" />
		<link child="SimulatorRobotFrame" parent="../maps/MapFrame">
			<X>0</X>
			<Y>0</Y>
			<Phi>0</Phi>
		</link>
		<if_not frontLaser="none">
			<namespace name="frontLaser">
				<using name="../SimulatorRobotFrame" />
				<using name="../RobotFrame" />
				<using name="../../maps/obstacle/Map" />
				<using name="../../maps/reflector/Map" as="ReflectorMap"/>
				<include file="${findpkg RangeFinderSimulator}/etc/RangeFinderSimulator-SickS300.xml"/>
			</namespace>
		</if_not>
		<if_not rearLaser="none">
			<namespace name="rearLaser">
				<using name="../SimulatorRobotFrame" />
				<using name="../RobotFrame" />
				<using name="../../maps/obstacle/Map" />
				<using name="../../maps/reflector/Map" as="ReflectorMap"/>
				<include file="${findpkg RangeFinderSimulator}/etc/RangeFinderSimulator-SickS300.xml"/>
			</namespace>
		</if_not>
	</namespace>

	<assert_exists var="localization">You need to specify a localization service by either installing package AMCL, Poseidon or specifying the variable 'localization'</assert_exists>	
	<include file="${findpkg SCITOSConfigs}/etc/${localization}Localization.xml"/>
	
	<namespace name="localization">
		<using name="../robot/Odometry" />
		<using name="../robot/OdometryFrame" />
		<using name="../robot/RobotFrame" />

		<if_not topoMap="none">
			<using name="../maps/LocalizationMap" as="Map" />
			<using name="../maps/BaseNodeFrame" />
			<if_exists class="viros::topomap::TopoPersistentLocalization">
				<unit id="PersistentPose" class="viros::topomap::TopoPersistentLocalization">
					<TopoMapManagerService>../maps/TopoMapManager</TopoMapManagerService>
				</unit>
			</if_exists>
		</if_not>
		<else>
			<using name="../maps/static/Map" />
			<using name="../maps/MapFrame" />
			
			<parameter name="Poseidon">
				<Persistence class="mira::localization::PersistentPose">
					<PersistentFolder>.</PersistentFolder>
					<BaseFileName>InitialPose</BaseFileName>
					<StorageInterval>500</StorageInterval>
				</Persistence>
			</parameter>
		</else>
	</namespace>

	<namespace name="navigation">
		<namespace name="laser">
			<using name="../../robot/OdometryFrame" as="MapFrame"/>
			<using name="../../robot/Odometry" />
			<using name="../../robot/RobotFrame"/>
			<unit id="GridMapperLaser" class="mira::mapping::OccupancyGridMapperWithShape">
				<!--The interval of the watchdog-->
				<HeartbeatInterval>1000</HeartbeatInterval>
				<!--The interval for trying to recover-->
				<RecoverInterval>1000</RecoverInterval>
				<!--The cell size of the created occupancy grid in m (default=0.05)-->
				<CellSize>0.02</CellSize>
				<!--The minimum certainty a range scan must have to be included into the map-->
				<MinCertainty>5</MinCertainty>
				<!--Scans are cropped at this maximum range-->
				<MaxRange>2</MaxRange>
				<!--The local cropping radius for mapping. If the specified local radius is >0, then the map is cropped to an area with the specified local radius
				(note that it may grow beyond the crop radius around the current position due to higher map update range)-->
				<LocalCropRadius>2</LocalCropRadius>
				<!--The sigma for distance reliability function (if 0 sigma is not used)-->
				<SensorReliabilitySigma>2</SensorReliabilitySigma>
				<!--The minimum occupancy estimated for current observation-->
				<MinEstimationOccupancyLimit>72</MinEstimationOccupancyLimit>
				<!--The maximum occupancy estimated for current observation-->
				<MaxEstimationOccupancyLimit>250</MaxEstimationOccupancyLimit>
				<!--The minimum occupancy in the map-->
				<MinOccupancyLimit>34</MinOccupancyLimit>
				<!--The maximum occupancy in the map-->
				<MaxOccupancyLimit>220</MaxOccupancyLimit>
				<!--Forget rate [0,1] for the occupancy values in the cells which is applied after the map was published. default: 0 = no forgetting-->
				<DecayRate>0.1</DecayRate>
				<!--The name of the service that provides a rigid model for clearing the shape of the model in the map
				(if empty, an arbitrary IRigidModelProvider service will be searched)-->
				<ModelProvider>../../robot/Robot</ModelProvider>
				<!--The name of the sensor channels-->
				<if_not rearLaser="none">
					<Sensors>
						<item>../../robot/frontLaser/Laser</item>
						<item>../../robot/rearLaser/Laser</item>
					</Sensors>
				</if_not>
				<else>
					<Sensors>
						<item>../../robot/frontLaser/Laser</item>
					</Sensors>
				</else>
			</unit>
		</namespace>

		<if sonar="true">
			<namespace name="sonar">
				<using name="../../robot/OdometryFrame" as="MapFrame"/>
				<using name="../../robot/Odometry" />
				<using name="../../robot/RobotFrame"/>
				<unit id="GridMapperSonar" class="mira::mapping::OccupancyGridMapperWithShape">
					<!--The interval of the watchdog-->
					<HeartbeatInterval>1000</HeartbeatInterval>
					<!--The interval for trying to recover-->
					<RecoverInterval>1000</RecoverInterval>
					<!--The cell size of the created occupancy grid in m (default=0.05)-->
					<CellSize>0.02</CellSize>
					<!--The minimum certainty a range scan must have to be included into the map-->
					<MinCertainty>5</MinCertainty>
					<!--Scans are cropped at this maximum range-->
					<MaxRange>2</MaxRange>
					<!--The local cropping radius for mapping. If the specified local radius is >0, then the map is cropped to an area with the specified local radius
					(note that it may grow beyond the crop radius around the current position due to higher map update range)-->
					<LocalCropRadius>2</LocalCropRadius>
					<!--The sigma for distance reliability function (if 0 sigma is not used)-->
					<SensorReliabilitySigma>2</SensorReliabilitySigma>
					<!--The minimum occupancy estimated for current observation-->
					<MinEstimationOccupancyLimit>72</MinEstimationOccupancyLimit>
					<!--The maximum occupancy estimated for current observation-->
					<MaxEstimationOccupancyLimit>250</MaxEstimationOccupancyLimit>
					<!--The minimum occupancy in the map-->
					<MinOccupancyLimit>34</MinOccupancyLimit>
					<!--The maximum occupancy in the map-->
					<MaxOccupancyLimit>220</MaxOccupancyLimit>
					<!--Forget rate [0,1] for the occupancy values in the cells which is applied after the map was published. default: 0 = no forgetting-->
					<DecayRate>0.1</DecayRate>
					<!--The name of the service that provides a rigid model for clearing the shape of the model in the map
					(if empty, an arbitrary IRigidModelProvider service will be searched)-->
					<ModelProvider>../../robot/Robot</ModelProvider>
					<!--The name of the sensor channels-->
					<Sensors>
						<item>../../robot/sonar/USSensor00</item>
						<item>../../robot/sonar/USSensor01</item>
						<item>../../robot/sonar/USSensor02</item>
						<item>../../robot/sonar/USSensor03</item>
						<item>../../robot/sonar/USSensor04</item>
						<item>../../robot/sonar/USSensor05</item>
						<item>../../robot/sonar/USSensor06</item>
						<item>../../robot/sonar/USSensor07</item>
						<item>../../robot/sonar/USSensor08</item>
						<item>../../robot/sonar/USSensor09</item>
						<item>../../robot/sonar/USSensor10</item>
						<item>../../robot/sonar/USSensor11</item>
						<item>../../robot/sonar/USSensor12</item>
						<item>../../robot/sonar/USSensor13</item>
						<item>../../robot/sonar/USSensor14</item>
						<item>../../robot/sonar/USSensor15</item>
						<item>../../robot/sonar/USSensor16</item>
						<item>../../robot/sonar/USSensor17</item>
						<item>../../robot/sonar/USSensor18</item>
						<item>../../robot/sonar/USSensor19</item>
						<item>../../robot/sonar/USSensor20</item>
						<item>../../robot/sonar/USSensor21</item>
						<item>../../robot/sonar/USSensor22</item>
						<item>../../robot/sonar/USSensor23</item>
					</Sensors>
				</unit>
			</namespace>
		</if>
		<unit id="GridMapMerger" class="mira::mapping::OccupancyGridMerger">
			<!--The interval of the watchdog-->
			<HeartbeatInterval>1000</HeartbeatInterval>
			<!--The interval for trying to recover-->
			<RecoverInterval>1000</RecoverInterval>
			<!--The cycle time of our process-->
			<CycleTime>100</CycleTime>
			<!--The maximum time about that we can exceed the cycle time before issuing a warning-->
			<CycleTimeTolerance>100</CycleTimeTolerance>
			<!--The vector of required map names.-->
			<RequiredMaps>
			  <item>laser/Map</item>
			</RequiredMaps>
			<!--The vector of optional map names.-->
			<OptionalMaps>
			  <item>sonar/Map</item>
			</OptionalMaps>
			<!--Maximum age of required and optional maps-->
			<MaxMapAge>1000</MaxMapAge>
		</unit>

		<using name="laser/Map" as="PlannerObstacleMap"/>
		<using name="MergedMap" as="LocalMap"/>

		<using name="../robot/Odometry"/>
		<using name="../robot/OdometryFrame" />
		<using name="../robot/RobotFrame" />
		<using name="../robot/RobotFrame" as="PlugFrame"/>
		<using name="../robot/Mileage"/>

		<if_not topoMap="none">
			<var pathPlanner="TopoMapPlanner"/>
			<using name="../maps/TopoMap"/>
			<using name="../maps/LocalizedNodes"/>
			<using name="../maps/GlobalMap"/>
			<using name="../maps/NogoMap"/>
			<using name="../maps/SpeedMap"/>
		</if_not>
		<else>
			<using name="../maps/static/Map" as="GlobalMap"/>
			<using name="../maps/nogo/Map" as="NogoMap"/>
			<using name="../maps/speed/Map" as="SpeedMap"/>
		</else>
		<using name="../maps/cost/PlannerMap_FinalInitMap" as="InitCostMap" />
		<using name="../maps/cost/PlannerMap_FinalCostMap" as="CurrentCostMap" />
		<using name="../maps/cost/CostMapper" />

		<include file="${pilotConfig}"/>
		<parameter name="Pilot">
			<DriveService>../robot/Robot</DriveService>
			<ModelProvider>../robot/Robot</ModelProvider>
		</parameter>
		<if safetyZone="true">
			<parameter name="navigation/Pilot.Planner.Objectives[?].item.Objective{mira::pilot::DistanceObjective}">
				<MaxSafetyZoneTransVelocity>${maxSafetyZoneVelocity}</MaxSafetyZoneTransVelocity>
			</parameter>
		</if>
		<parameter name="Pilot.Planner.Objectives[+end]">
			<item>
				<Objective class="mira::pilot::NogoObjective"/>
				<!--If true, the objective is disabled-->
				<Disabled>false</Disabled>
				<!--The weight for this objective-->
				<Weight>1.0</Weight>
			</item>
		</parameter>
	</namespace>
</root>
